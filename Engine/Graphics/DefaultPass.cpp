#include "DefaultPass.hpp"
#include "Base/Math/Matrix.hpp"
#include "Core/Scene/Components/Transform.hpp"
#include "Graphics/Components/Renderable.hpp"
#include <glm/gtc/matrix_transform.hpp>

/*
#version 450

layout(location = 0) in vec3 position;
layout(location = 1) in vec4 color;
layout(location = 2) in vec2 texCoord;

layout(set = 1, binding = 0) uniform MVP {
    mat4 model;
    mat4 view;
    mat4 projection;
} mvp;

layout(location = 0) out vec4 fragColor;
layout(location = 1) out vec2 fragTexCoord;

void main() {
    gl_Position = mvp.projection * mvp.view * mvp.model * vec4(position, 1.0);
    fragColor = color;
    fragTexCoord = texCoord;
}
*/

const u32 vertexShaderSpv[] = {
    0x07230203, 0x00010000, 0x000d000b, 0x00000035, 0x00000000, 0x00020011, 0x00000001, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e,
    0x00000000, 0x0003000e, 0x00000000, 0x00000001, 0x000b000f, 0x00000000, 0x00000004, 0x6e69616d, 0x00000000, 0x0000000d, 0x00000021, 0x0000002b,
    0x0000002d, 0x00000031, 0x00000033, 0x00030003, 0x00000002, 0x000001c2, 0x000a0004, 0x475f4c47, 0x4c474f4f, 0x70635f45, 0x74735f70, 0x5f656c79,
    0x656e696c, 0x7269645f, 0x69746365, 0x00006576, 0x00080004, 0x475f4c47, 0x4c474f4f, 0x6e695f45, 0x64756c63, 0x69645f65, 0x74636572, 0x00657669,
    0x00040005, 0x00000004, 0x6e69616d, 0x00000000, 0x00060005, 0x0000000b, 0x505f6c67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x0000000b,
    0x00000000, 0x505f6c67, 0x7469736f, 0x006e6f69, 0x00070006, 0x0000000b, 0x00000001, 0x505f6c67, 0x746e696f, 0x657a6953, 0x00000000, 0x00070006,
    0x0000000b, 0x00000002, 0x435f6c67, 0x4470696c, 0x61747369, 0x0065636e, 0x00070006, 0x0000000b, 0x00000003, 0x435f6c67, 0x446c6c75, 0x61747369,
    0x0065636e, 0x00030005, 0x0000000d, 0x00000000, 0x00030005, 0x00000011, 0x0050564d, 0x00050006, 0x00000011, 0x00000000, 0x65646f6d, 0x0000006c,
    0x00050006, 0x00000011, 0x00000001, 0x77656976, 0x00000000, 0x00060006, 0x00000011, 0x00000002, 0x6a6f7270, 0x69746365, 0x00006e6f, 0x00030005,
    0x00000013, 0x0070766d, 0x00050005, 0x00000021, 0x69736f70, 0x6e6f6974, 0x00000000, 0x00050005, 0x0000002b, 0x67617266, 0x6f6c6f43, 0x00000072,
    0x00040005, 0x0000002d, 0x6f6c6f63, 0x00000072, 0x00060005, 0x00000031, 0x67617266, 0x43786554, 0x64726f6f, 0x00000000, 0x00050005, 0x00000033,
    0x43786574, 0x64726f6f, 0x00000000, 0x00030047, 0x0000000b, 0x00000002, 0x00050048, 0x0000000b, 0x00000000, 0x0000000b, 0x00000000, 0x00050048,
    0x0000000b, 0x00000001, 0x0000000b, 0x00000001, 0x00050048, 0x0000000b, 0x00000002, 0x0000000b, 0x00000003, 0x00050048, 0x0000000b, 0x00000003,
    0x0000000b, 0x00000004, 0x00030047, 0x00000011, 0x00000002, 0x00040048, 0x00000011, 0x00000000, 0x00000005, 0x00050048, 0x00000011, 0x00000000,
    0x00000007, 0x00000010, 0x00050048, 0x00000011, 0x00000000, 0x00000023, 0x00000000, 0x00040048, 0x00000011, 0x00000001, 0x00000005, 0x00050048,
    0x00000011, 0x00000001, 0x00000007, 0x00000010, 0x00050048, 0x00000011, 0x00000001, 0x00000023, 0x00000040, 0x00040048, 0x00000011, 0x00000002,
    0x00000005, 0x00050048, 0x00000011, 0x00000002, 0x00000007, 0x00000010, 0x00050048, 0x00000011, 0x00000002, 0x00000023, 0x00000080, 0x00040047,
    0x00000013, 0x00000021, 0x00000000, 0x00040047, 0x00000013, 0x00000022, 0x00000001, 0x00040047, 0x00000021, 0x0000001e, 0x00000000, 0x00040047,
    0x0000002b, 0x0000001e, 0x00000000, 0x00040047, 0x0000002d, 0x0000001e, 0x00000001, 0x00040047, 0x00000031, 0x0000001e, 0x00000001, 0x00040047,
    0x00000033, 0x0000001e, 0x00000002, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017,
    0x00000007, 0x00000006, 0x00000004, 0x00040015, 0x00000008, 0x00000020, 0x00000000, 0x0004002b, 0x00000008, 0x00000009, 0x00000001, 0x0004001c,
    0x0000000a, 0x00000006, 0x00000009, 0x0006001e, 0x0000000b, 0x00000007, 0x00000006, 0x0000000a, 0x0000000a, 0x00040020, 0x0000000c, 0x00000003,
    0x0000000b, 0x0004003b, 0x0000000c, 0x0000000d, 0x00000003, 0x00040015, 0x0000000e, 0x00000020, 0x00000001, 0x0004002b, 0x0000000e, 0x0000000f,
    0x00000000, 0x00040018, 0x00000010, 0x00000007, 0x00000004, 0x0005001e, 0x00000011, 0x00000010, 0x00000010, 0x00000010, 0x00040020, 0x00000012,
    0x00000002, 0x00000011, 0x0004003b, 0x00000012, 0x00000013, 0x00000002, 0x0004002b, 0x0000000e, 0x00000014, 0x00000002, 0x00040020, 0x00000015,
    0x00000002, 0x00000010, 0x0004002b, 0x0000000e, 0x00000018, 0x00000001, 0x00040017, 0x0000001f, 0x00000006, 0x00000003, 0x00040020, 0x00000020,
    0x00000001, 0x0000001f, 0x0004003b, 0x00000020, 0x00000021, 0x00000001, 0x0004002b, 0x00000006, 0x00000023, 0x3f800000, 0x00040020, 0x00000029,
    0x00000003, 0x00000007, 0x0004003b, 0x00000029, 0x0000002b, 0x00000003, 0x00040020, 0x0000002c, 0x00000001, 0x00000007, 0x0004003b, 0x0000002c,
    0x0000002d, 0x00000001, 0x00040017, 0x0000002f, 0x00000006, 0x00000002, 0x00040020, 0x00000030, 0x00000003, 0x0000002f, 0x0004003b, 0x00000030,
    0x00000031, 0x00000003, 0x00040020, 0x00000032, 0x00000001, 0x0000002f, 0x0004003b, 0x00000032, 0x00000033, 0x00000001, 0x00050036, 0x00000002,
    0x00000004, 0x00000000, 0x00000003, 0x000200f8, 0x00000005, 0x00050041, 0x00000015, 0x00000016, 0x00000013, 0x00000014, 0x0004003d, 0x00000010,
    0x00000017, 0x00000016, 0x00050041, 0x00000015, 0x00000019, 0x00000013, 0x00000018, 0x0004003d, 0x00000010, 0x0000001a, 0x00000019, 0x00050092,
    0x00000010, 0x0000001b, 0x00000017, 0x0000001a, 0x00050041, 0x00000015, 0x0000001c, 0x00000013, 0x0000000f, 0x0004003d, 0x00000010, 0x0000001d,
    0x0000001c, 0x00050092, 0x00000010, 0x0000001e, 0x0000001b, 0x0000001d, 0x0004003d, 0x0000001f, 0x00000022, 0x00000021, 0x00050051, 0x00000006,
    0x00000024, 0x00000022, 0x00000000, 0x00050051, 0x00000006, 0x00000025, 0x00000022, 0x00000001, 0x00050051, 0x00000006, 0x00000026, 0x00000022,
    0x00000002, 0x00070050, 0x00000007, 0x00000027, 0x00000024, 0x00000025, 0x00000026, 0x00000023, 0x00050091, 0x00000007, 0x00000028, 0x0000001e,
    0x00000027, 0x00050041, 0x00000029, 0x0000002a, 0x0000000d, 0x0000000f, 0x0003003e, 0x0000002a, 0x00000028, 0x0004003d, 0x00000007, 0x0000002e,
    0x0000002d, 0x0003003e, 0x0000002b, 0x0000002e, 0x0004003d, 0x0000002f, 0x00000034, 0x00000033, 0x0003003e, 0x00000031, 0x00000034, 0x000100fd,
    0x00010038};

/*
#version 450

layout(location = 0) in vec4 fragColor;
layout(location = 1) in vec2 fragTexCoord;

layout(set = 2, binding = 0) uniform sampler2D u_Texture;

layout(location = 0) out vec4 fragColorOut;

void main() {
    fragColorOut = fragColor * texture(u_Texture, fragTexCoord);
}
*/

const u32 fragmentShaderSpv[] = {
    0x07230203, 0x00010000, 0x000d000b, 0x00000018, 0x00000000, 0x00020011, 0x00000001, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e,
    0x00000000, 0x0003000e, 0x00000000, 0x00000001, 0x0008000f, 0x00000004, 0x00000004, 0x6e69616d, 0x00000000, 0x00000009, 0x0000000b, 0x00000014,
    0x00030010, 0x00000004, 0x00000007, 0x00030003, 0x00000002, 0x000001c2, 0x000a0004, 0x475f4c47, 0x4c474f4f, 0x70635f45, 0x74735f70, 0x5f656c79,
    0x656e696c, 0x7269645f, 0x69746365, 0x00006576, 0x00080004, 0x475f4c47, 0x4c474f4f, 0x6e695f45, 0x64756c63, 0x69645f65, 0x74636572, 0x00657669,
    0x00040005, 0x00000004, 0x6e69616d, 0x00000000, 0x00060005, 0x00000009, 0x67617266, 0x6f6c6f43, 0x74754f72, 0x00000000, 0x00050005, 0x0000000b,
    0x67617266, 0x6f6c6f43, 0x00000072, 0x00050005, 0x00000010, 0x65545f75, 0x72757478, 0x00000065, 0x00060005, 0x00000014, 0x67617266, 0x43786554,
    0x64726f6f, 0x00000000, 0x00040047, 0x00000009, 0x0000001e, 0x00000000, 0x00040047, 0x0000000b, 0x0000001e, 0x00000000, 0x00040047, 0x00000010,
    0x00000021, 0x00000000, 0x00040047, 0x00000010, 0x00000022, 0x00000002, 0x00040047, 0x00000014, 0x0000001e, 0x00000001, 0x00020013, 0x00000002,
    0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008,
    0x00000003, 0x00000007, 0x0004003b, 0x00000008, 0x00000009, 0x00000003, 0x00040020, 0x0000000a, 0x00000001, 0x00000007, 0x0004003b, 0x0000000a,
    0x0000000b, 0x00000001, 0x00090019, 0x0000000d, 0x00000006, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001b,
    0x0000000e, 0x0000000d, 0x00040020, 0x0000000f, 0x00000000, 0x0000000e, 0x0004003b, 0x0000000f, 0x00000010, 0x00000000, 0x00040017, 0x00000012,
    0x00000006, 0x00000002, 0x00040020, 0x00000013, 0x00000001, 0x00000012, 0x0004003b, 0x00000013, 0x00000014, 0x00000001, 0x00050036, 0x00000002,
    0x00000004, 0x00000000, 0x00000003, 0x000200f8, 0x00000005, 0x0004003d, 0x00000007, 0x0000000c, 0x0000000b, 0x0004003d, 0x0000000e, 0x00000011,
    0x00000010, 0x0004003d, 0x00000012, 0x00000015, 0x00000014, 0x00050057, 0x00000007, 0x00000016, 0x00000011, 0x00000015, 0x00050085, 0x00000007,
    0x00000017, 0x0000000c, 0x00000016, 0x0003003e, 0x00000009, 0x00000017, 0x000100fd, 0x00010038};

namespace Crane::Graphics {
  DefaultPass::DefaultPass(IRenderer &renderer) : RenderPass(renderer) {
    Id vertexShaderId = m_Renderer.CreateShader({
        .type = Graphics::ShaderType::Vertex,
        .source = reinterpret_cast<const u8 *>(vertexShaderSpv),
        .size = sizeof(vertexShaderSpv),
        .numUniformBuffers = 1,
    });
    Id fragmentShaderId = m_Renderer.CreateShader({
        .type = Graphics::ShaderType::Fragment,
        .source = reinterpret_cast<const u8 *>(fragmentShaderSpv),
        .size = sizeof(fragmentShaderSpv),
        .numSamplers = 1,
        .numUniformBuffers = 1,
    });

    Graphics::PipelineCreateInfo pipelineInfo;
    pipelineInfo.vertexShaderId = vertexShaderId;
    pipelineInfo.fragmentShaderId = fragmentShaderId;
    Graphics::SVertex2 vertex;
    pipelineInfo.vertexDefinition = vertex.GetDefinition();
    pipelineInfo.vertexSize = vertex.GetSize();

    m_PipelineId = m_Renderer.CreatePipeline(pipelineInfo);
    m_SamplerId = m_Renderer.CreateSampler({});
  }

  void DefaultPass::Render(Scene::World &world) {
    m_Renderer.BindPipeline(m_PipelineId);
    auto &registry = world.GetRegistry();
    auto view = registry.view<Scene::Components::Transform, Scene::Components::Renderable>();

    struct {
      Math::Mat4 model = Math::Mat4(1.0f);
      Math::Mat4 view = glm::lookAt(Math::Vec3f(0.0f, 0.0f, 5.0f), Math::Vec3f(0.0f, 0.0f, 0.0f), Math::Vec3f(0.0f, 1.0f, 0.0f));
      Math::Mat4 projection = glm::ortho(0.0f, 1600.0f, 900.0f, 0.0f, 0.1f, 100.0f);
    } mvp;

    for (auto entity : view) {
      const auto &[transform, renderable] = view.get<Scene::Components::Transform, Scene::Components::Renderable>(entity);

      m_Renderer.BindTexture(renderable.textureId, m_SamplerId);
      m_Renderer.BindBuffer(renderable.mesh.vertexBufferId);
      m_Renderer.BindBuffer(renderable.mesh.indexBufferId);

      mvp.model = glm::translate(Math::Mat4(1.0f), transform.transform.position);
      mvp.model = glm::rotate(mvp.model, transform.transform.rotation, Math::Vec3f(0.0f, 0.0f, 1.0f));

      m_Renderer.PushVertexUniformData(0, &mvp, sizeof(mvp));
      m_Renderer.DrawIndexed(renderable.mesh.indexCount);
    }
  }
}